on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    working-directory: ./back

jobs:
  lint-test-coverage:
    name: Lint, Tests & Coverage
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.1"
          cache: "npm"
          cache-dependency-path: back/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run unit tests with coverage
        run: npm run test:cov
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/plany-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_AT: test-access-token-secret-for-ci
          JWT_SECRET_RT: test-refresh-token-secret-for-ci
          JWT_EXPIRES_AT: 15m
          JWT_EXPIRES_RT: 7d

      - name: Enforce coverage threshold (80% minimum - Standard CDA)
        run: |
          npx jest --coverage --passWithNoTests \
            --coverageThreshold='{
              "global": {
                "lines": 80,
                "functions": 80,
                "branches": 75,
                "statements": 80
              }
            }'
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/plany-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_AT: test-access-token-secret-for-ci
          JWT_SECRET_RT: test-refresh-token-secret-for-ci
          JWT_EXPIRES_AT: 15m
          JWT_EXPIRES_RT: 7d

      - name: Run integration tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/plany-test-e2e
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_AT: test-access-token-secret-for-ci
          JWT_SECRET_RT: test-refresh-token-secret-for-ci
          JWT_EXPIRES_AT: 15m
          JWT_EXPIRES_RT: 7d

      # ‚úÖ CORRIG√â : G√©n√©ration du rapport de coverage
      - name: Generate coverage summary
        run: |
          echo "## üìä Backend Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "Coverage Summary:" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq -r '.total | "Lines: " + (.lines.pct|tostring) + "% | Functions: " + (.functions.pct|tostring) + "% | Branches: " + (.branches.pct|tostring) + "% | Statements: " + (.statements.pct|tostring) + "%"' >> $GITHUB_STEP_SUMMARY
          else
            echo "No coverage summary found" >> $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY

      # ‚úÖ CORRIG√â : Commentaire PR avec coverage
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Chemin correct vers le fichier de coverage
              const coveragePath = path.join(process.cwd(), 'back', 'coverage', 'coverage-summary.json');
              
              if (!fs.existsSync(coveragePath)) {
                console.log('No coverage file found at:', coveragePath);
                return;
              }
              
              const coverage = fs.readFileSync(coveragePath, 'utf8');
              const data = JSON.parse(coverage);
              const total = data.total;

              const comment = `## üìä Backend Coverage Report
              | Metric | Coverage | Status |
              |--------|----------|--------|
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '‚úÖ' : '‚ùå'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 80 ? '‚úÖ' : '‚ùå'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 75 ? '‚úÖ' : '‚ùå'} |
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '‚úÖ' : '‚ùå'} |
              
              **Thresholds:** Lines ‚â• 80%, Functions ‚â• 80%, Branches ‚â• 75%, Statements ‚â• 80%`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
            } catch (error) {
              console.log('Error generating coverage comment:', error.message);
              // Ne pas faire √©chouer le build pour un probl√®me de commentaire
            }

  security-audit:
    name: Security Audit & Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.1"
          cache: "npm"
          cache-dependency-path: back/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm security audit (non-blocking)
        run: npm audit --audit-level=high || true

      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
            p/owasp-top-ten

      - name: Run Gitleaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  quality-gates:
    name: Quality Gates & SonarQube
    runs-on: ubuntu-latest
    needs: [lint-test-coverage]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.1"
          cache: "npm"
          cache-dependency-path: back/package-lock.json

      - name: Install dependencies
        run: npm ci

      # ‚úÖ CORRIG√â : Re-g√©n√©rer la coverage pour SonarQube
      - name: Generate coverage for SonarQube
        run: npm run test:cov
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/plany-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_AT: test-access-token-secret-for-ci
          JWT_SECRET_RT: test-refresh-token-secret-for-ci
          JWT_EXPIRES_AT: 15m
          JWT_EXPIRES_RT: 7d

      # ‚úÖ CORRIG√â : SonarQube Scanner avec gestion d'erreurs
      - name: Run SonarQube Scanner
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=your-project-key \
            -Dsonar.organization=your-organization \
            -Dsonar.sources=src \
            -Dsonar.tests=src \
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true # Ne pas faire √©chouer si SonarQube n'est pas configur√©

      # ‚úÖ CORRIG√â : Quality Gate avec gestion d'erreurs
      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt # Chemin correct
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true # Ne pas faire √©chouer si pas configur√©
