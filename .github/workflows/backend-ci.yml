name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ["back/**"]
  pull_request:
    paths: ["back/**"]

defaults:
  run:
    working-directory: ./back

jobs:
  lint-test-coverage:
    name: Lint, Tests & Coverage
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.1"
          cache: "npm"
          cache-dependency-path: back/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run unit tests with coverage
        run: npm run test:cov
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/plany-test
          REDIS_URL: redis://localhost:6379

      - name: Enforce coverage threshold (80% minimum - Standard CDA)
        run: |
          npx jest --coverage --passWithNoTests \
            --coverageThreshold='{
              "global": {
                "lines": 80,
                "functions": 80,
                "branches": 75,
                "statements": 80
              }
            }'

      - name: Run integration tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/plany-test-e2e
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./back/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

  security-audit:
    name: Security Audit & Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.1"
          cache: "npm"
          cache-dependency-path: back/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm security audit
        run: npm audit --audit-level=high

      - name: Install and run OSV Scanner
        run: |
          curl -sSfL https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_1.7.3_linux_amd64.tar.gz | tar -xvzf -
          sudo mv ./osv-scanner /usr/local/bin/osv-scanner
          osv-scanner --recursive .

      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
            p/owasp-top-ten

      - name: Run Gitleaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  quality-gates:
    name: Quality Gates & SonarQube
    runs-on: ubuntu-latest
    needs: [lint-test-coverage]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.1"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      # Le vrai scan Sonar
      - name: Run SonarQube Scanner
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=your-project-key \
            -Dsonar.organization=your-organization \
            -Dsonar.sources=src \
            -Dsonar.tests=src \
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Qualit√© : Quality Gate bloquant
      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: backend/coverage/sonar-report.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
